# EKS to EC2 Migration Guide

## Current State
- FastAPI application running in EKS cluster
- ALB + Kubernetes Service + Ingress configuration
- Terraform managing AWS infrastructure
- Use case: API reading → vectorization → LLM processing → API response
- Status: Pilot testing phase

## Problem Statement
EKS is overly complex and expensive for our current needs:
- EKS control plane: ~$73/month base cost
- Additional worker node costs
- Operational complexity for a single service
- Overkill for pilot testing phase

## Target Architecture: Simple EC2 Deployment

### Infrastructure Components
- **Single EC2 instance** (t3.medium recommended for start)
- **Security Group** allowing HTTP/HTTPS traffic
- **Optional ALB** for SSL termination and custom domain
- **Optional Auto Scaling Group** for future redundancy

### Deployment Strategy
- FastAPI Docker container runs directly on EC2
- Docker Compose or simple `docker run` command
- Same application code, different orchestration
- SSL via ALB or Let's Encrypt on instance

## Implementation Plan

### Phase 1: Create New Infrastructure
1. Create new git branch: `feature/ec2-migration`
2. Create new Terraform configuration for EC2
3. Test deployment in parallel with existing EKS setup

### Phase 2: Application Deployment
1. Build and push same Docker image
2. Deploy to EC2 instance
3. Configure environment variables
4. Test application functionality

### Phase 3: Traffic Cutover
1. Update DNS/ALB target groups
2. Monitor application performance
3. Verify all functionality works
4. Decommission EKS resources

## Cost Comparison

| Component | EKS Setup | EC2 Setup |
|-----------|-----------|-----------|
| Control Plane | $73/month | $0 |
| Compute | t3.medium nodes | t3.medium instance |
| Load Balancer | ALB | ALB (optional) |
| **Estimated Monthly** | **~$120-150** | **~$30-50** |

## Terraform Changes Needed

### Remove
- EKS cluster resources
- Kubernetes provider configurations
- ALB Ingress Controller
- EKS-specific IAM roles
- Worker node groups

### Add
- EC2 instance resource
- Security group for HTTP/HTTPS
- Instance profile with necessary permissions
- User data script for Docker installation
- Optional: ALB targeting EC2 instance directly

## Docker Deployment Options

### Option 1: Simple Docker Run
```bash
docker run -d \
  --name fastapi-app \
  -p 80:8000 \
  --restart unless-stopped \
  your-fastapi-image:latest
```

### Option 2: Docker Compose
```yaml
version: '3.8'
services:
  fastapi:
    image: your-fastapi-image:latest
    ports:
      - "80:8000"
    restart: unless-stopped
    environment:
      - ENV_VAR_1=value1
      - ENV_VAR_2=value2
```

### Option 3: Systemd Service
Create service file for production-like deployment with auto-restart and logging.

## Migration Benefits

### Immediate
- **70% cost reduction** (estimated)
- **Simplified debugging** - direct EC2 access
- **Faster deployments** - no Kubernetes complexity
- **Easier monitoring** - standard EC2 CloudWatch metrics

### Long-term
- **Clear upgrade path** - can move back to EKS when scale demands it
- **Same application code** - Docker container unchanged
- **Learning opportunity** - understand both deployment patterns

## Risks and Mitigations

### Risks
- Single point of failure (vs EKS multi-AZ)
- Manual scaling required
- Less sophisticated health checking

### Mitigations
- Start with single instance for pilot
- Add Auto Scaling Group when needed
- Implement proper health check endpoints
- Use ALB health checks
- Plan EKS migration path for future scale

## Next Steps

1. **Create new branch**: `git checkout -b feature/ec2-migration`
2. **Design EC2 Terraform config** - start with minimal viable setup
3. **Test deployment process** - ensure Docker image works on EC2
4. **Implement monitoring** - CloudWatch logs and metrics
5. **Plan rollback strategy** - keep EKS config in separate branch

## Success Criteria

- [ ] FastAPI application running on EC2
- [ ] Same functionality as EKS deployment
- [ ] Cost reduction achieved
- [ ] Simplified deployment process
- [ ] Monitoring and health checks working
- [ ] SSL/TLS configured (if using custom domain)

## Future Considerations

### When to Consider EKS Again
- Multiple microservices
- Complex scaling requirements
- Multi-environment deployments
- Team grows beyond 2-3 developers
- High availability requirements

### Graduation Path
- EC2 → Auto Scaling Group → EKS
- Same Docker images throughout
- Infrastructure as Code maintained
- Zero application code changes

---

**Remember**: This is about right-sizing infrastructure for current needs. You can always scale up complexity when you scale up requirements.