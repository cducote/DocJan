export function mergeClockIntoResponse(response, clock) {
    // HACK: we assume any response with a `performance` property wants client
    // performance metrics merged into that object.
    if (response.performance === undefined || clock === undefined) {
        return;
    }
    const out = response.performance;
    const end = performance.now();
    out.client_total_ms = end - clock.requestStart;
    if (clock.compressStart !== undefined && clock.compressEnd !== undefined) {
        out.client_compress_ms = clock.compressEnd - clock.compressStart;
    }
    if (clock.responseHeadersEnd !== undefined && clock.requestStart !== undefined) {
        out.client_response_ms = clock.responseHeadersEnd - clock.requestStart;
    }
    if (clock.bodyReadEnd !== undefined && clock.responseHeadersEnd !== undefined) {
        out.client_body_read_ms = clock.bodyReadEnd - clock.responseHeadersEnd;
    }
    if (clock.decompressEnd !== undefined && clock.bodyReadEnd !== undefined) {
        out.client_decompress_ms = clock.decompressEnd - clock.bodyReadEnd;
    }
    if (clock.deserializeStart !== undefined) {
        out.client_deserialize_ms = end - clock.deserializeStart;
    }
}
//# sourceMappingURL=performance.mjs.map