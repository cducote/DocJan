export interface RequestClock {
    requestStart: number;
    compressStart?: number;
    compressEnd?: number;
    responseHeadersEnd?: number;
    bodyReadEnd?: number;
    decompressEnd?: number;
    deserializeStart?: number;
}
export declare function mergeClockIntoResponse(response: any, clock: RequestClock): void;
export interface ClientPerformance {
    /** Total request time in milliseconds, measured on the client.
     *
     * Note this only includes the time spent during the last retry.
     */
    client_total_ms: number;
    /** Number of milliseconds spent compressing the request on the client. */
    client_compress_ms?: number;
    /** Number of milliseconds between the start of the request and receiving the
     * last response header from the server.
     *
     * WARNING: This parameter is only set when using the default fetch
     * implementation in Node and Deno.
     */
    client_response_ms?: number;
    /** Number of milliseconds between receiving the last response header from
     * the server and receiving the end of the response body from the server.
     *
     * WARNING: This parameter is only set when using the default fetch
     * implementation in Node and Deno.
     */
    client_body_read_ms?: number;
    /** Number of milliseconds spent decompressing the response on the client.
     *
     * WARNING: This parameter is only set when using the default fetch
     * implementation in Node and Deno.
     */
    client_decompress_ms?: number;
    /** Number of milliseconds spent deserializing the response on the
     * client. */
    client_deserialize_ms?: number;
}
//# sourceMappingURL=performance.d.mts.map