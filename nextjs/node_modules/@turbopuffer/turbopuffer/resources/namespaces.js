"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace = void 0;
const resource_1 = require("../core/resource.js");
const path_1 = require("../internal/utils/path.js");
const error_1 = require("../error.js");
class Namespace extends resource_1.APIResource {
    /**
     * Delete namespace.
     */
    deleteAll(params = {}, options) {
        const { namespace = this._client.defaultNamespace } = params ?? {};
        return this._client.delete((0, path_1.path) `/v2/namespaces/${namespace}`, options);
    }
    /**
     * Explain a query plan.
     */
    explainQuery(params = {}, options) {
        const { namespace = this._client.defaultNamespace, ...body } = params ?? {};
        return this._client.post((0, path_1.path) `/v2/namespaces/${namespace}/explain_query`, { body, ...options });
    }
    /**
     * Warm the cache for a namespace.
     */
    hintCacheWarm(params = {}, options) {
        const { namespace = this._client.defaultNamespace } = params ?? {};
        return this._client.get((0, path_1.path) `/v1/namespaces/${namespace}/hint_cache_warm`, options);
    }
    /**
     * Get metadata about a namespace.
     */
    metadata(params = {}, options) {
        const { namespace = this._client.defaultNamespace } = params ?? {};
        return this._client.get((0, path_1.path) `/v1/namespaces/${namespace}/metadata`, options);
    }
    /**
     * Issue multiple concurrent queries filter or search documents.
     */
    multiQuery(params, options) {
        const { namespace = this._client.defaultNamespace, ...body } = params;
        return this._client.post((0, path_1.path) `/v2/namespaces/${namespace}/query?stainless_overload=multiQuery`, {
            body,
            ...options,
        });
    }
    /**
     * Query, filter, full-text search and vector search documents.
     */
    query(params = {}, options) {
        const { namespace = this._client.defaultNamespace, ...body } = params ?? {};
        return this._client.post((0, path_1.path) `/v2/namespaces/${namespace}/query`, { body, ...options });
    }
    /**
     * Evaluate recall.
     */
    recall(params = {}, options) {
        const { namespace = this._client.defaultNamespace, ...body } = params ?? {};
        return this._client.post((0, path_1.path) `/v1/namespaces/${namespace}/_debug/recall`, { body, ...options });
    }
    /**
     * Get namespace schema.
     */
    schema(params = {}, options) {
        const { namespace = this._client.defaultNamespace } = params ?? {};
        return this._client.get((0, path_1.path) `/v1/namespaces/${namespace}/schema`, options);
    }
    /**
     * Check whether the namespace exists.
     */
    async exists() {
        try {
            await this.schema();
            return true;
        }
        catch (e) {
            if (e instanceof error_1.NotFoundError) {
                return false;
            }
            throw e;
        }
    }
    /**
     * Update namespace schema.
     */
    updateSchema(params = undefined, options) {
        const { namespace = this._client.defaultNamespace, schema } = params ?? {};
        return this._client.post((0, path_1.path) `/v1/namespaces/${namespace}/schema`, { body: schema, ...options });
    }
    /**
     * Create, update, or delete documents.
     */
    write(params = {}, options) {
        const { namespace = this._client.defaultNamespace, ...body } = params ?? {};
        return this._client.post((0, path_1.path) `/v2/namespaces/${namespace}`, { body, maxRetries: 6, ...options });
    }
}
exports.Namespace = Namespace;
//# sourceMappingURL=namespaces.js.map